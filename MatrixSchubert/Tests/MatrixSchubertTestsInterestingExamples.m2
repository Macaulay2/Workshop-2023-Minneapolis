------------------------
-------------------------
--**TESTS SECTIONS**--
-------------------------
-------------------------

--Testing MatrixSchubertConstructions with semi-interesting permutation / ASM / partial ASM--


TEST ///
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

--isPartialASM--
assert(isPartialASM(I) == true);
assert(isPartialASM(PI) == true);

--partialASMtToASM
outPI = matrix{{0, 0, 1, 0, 0, 0}, {0, 1, -1, 1, 0, 0}, {1, -1, 1, 0, 0, 0}, {0, 1, 0, -1, 0, 1}, {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0}};
assert(partialASMToASM(I) == I);
assert(partialASMToASM(PI) == outPI);
///

TEST ///
--antiDiagInit--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

L = antiDiagInit w;
assert(numgens L == 14);
assert(toExternalString L_0 == "z_(1,1)");
assert(toExternalString L_1 == "z_(1,3)*z_(2,2)*z_(3,1)");
assert(toExternalString L_2 == "z_(1,4)*z_(2,2)*z_(3,1)");
assert(toExternalString L_3 == "z_(1,5)*z_(2,2)*z_(3,1)");
assert(toExternalString L_4 == "z_(1,4)*z_(2,3)*z_(3,1)");
assert(toExternalString L_5 == "z_(1,5)*z_(2,3)*z_(3,1)");
assert(toExternalString L_6 == "z_(1,5)*z_(2,4)*z_(3,1)");
assert(toExternalString L_7 == "z_(1,4)*z_(2,3)*z_(3,2)");
assert(toExternalString L_8 == "z_(1,5)*z_(2,3)*z_(3,2)");
assert(toExternalString L_9 == "z_(1,5)*z_(2,4)*z_(3,2)");
assert(toExternalString L_10 == "z_(1,5)*z_(2,4)*z_(3,3)");
assert(toExternalString L_11 == "z_(1,4)*z_(2,3)*z_(4,2)*z_(5,1)");
assert(toExternalString L_12 == "z_(1,4)*z_(3,3)*z_(4,2)*z_(5,1)");
assert(toExternalString L_13 == "z_(2,4)*z_(3,3)*z_(4,2)*z_(5,1)");

L = antiDiagInit I;
assert(numgens L == 6);
assert(toExternalString L_0 == "z_(1,1)");
assert(toExternalString L_1 == "z_(1,2)");
assert(toExternalString L_2 == "z_(2,1)");
assert(toExternalString L_3 == "z_(1,3)*z_(2,2)");
assert(toExternalString L_4 == "z_(2,2)*z_(3,1)");
assert(toExternalString L_5 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)");

L= antiDiagInit PI;
assert(numgens L == 10);
assert(toExternalString L_0 == "z_(1,1)");
assert(toExternalString L_1 == "z_(1,2)");
assert(toExternalString L_2 == "z_(2,1)");
assert(toExternalString L_3 == "z_(1,3)*z_(2,2)");
assert(toExternalString L_4 == "z_(2,2)*z_(3,1)");
assert(toExternalString L_5 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)");
assert(toExternalString L_6 == "z_(1,5)*z_(2,3)*z_(3,2)*z_(4,1)");
assert(toExternalString L_7 == "z_(1,5)*z_(2,4)*z_(3,2)*z_(4,1)");
assert(toExternalString L_8 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,1)");
assert(toExternalString L_9 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,2)");
///

TEST ///
--rankMatrix--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(rankMatrix(w) == matrix{{0, 1, 1, 1, 1, 1}, {1, 2, 2, 2, 2, 2}, {1, 2, 2, 2, 2, 3}, {1, 2, 3, 3, 3, 4}, {1, 2, 3, 3, 4, 5}, {1, 2, 3, 4, 5, 6}} );
assert(rankMatrix(I) == matrix{{0, 0, 1, 1, 1}, {0, 1, 1, 2, 2}, {1, 1, 2, 3, 3}, {1, 2, 3, 3, 4}, {1, 2, 3, 4, 5}} );
assert(rankMatrix(PI) == matrix{{0, 0, 1, 1, 1}, {0, 1, 1, 2, 2}, {1, 1, 2, 3, 3}, {1, 2, 3, 3, 3}, {1, 2, 3, 4, 4}} );
///

TEST ///
--rotheDiagram--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(rotheDiagram(w) == {(1, 1), (3, 3), (3, 4), (3, 5), (5, 4)} );
assert(rotheDiagram(I) == {(1, 1), (1, 2), (2, 1), (2, 3), (3, 2), (4, 4)} );
assert(rotheDiagram(PI) == {(1, 1), (1, 2), (2, 1), (2, 3), (3, 2), (4, 4), (4, 5)} );
///

TEST ///
--augmentedRotheDiagram--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(augmentedRotheDiagram(w) == {((1, 1), 0), ((3, 3), 2), ((3, 4), 2), ((3, 5), 2), ((5, 4), 3)} );
assert(augmentedRotheDiagram(I) ==  {((1, 1), 0), ((1, 2), 0), ((2, 1), 0), ((2, 3), 1), ((3, 2), 1), ((4, 4), 3)} );
assert(augmentedRotheDiagram(PI) ==  {((1, 1), 0), ((1, 2), 0), ((2, 1), 0), ((2, 3), 1), ((3, 2), 1), ((4, 4), 3), ((4, 5),3)} );
///

TEST ///
--essentialSet--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(essentialSet(w) ==  {(1, 1), (3, 5), (5, 4)} );
assert(essentialSet(I) ==  {(1, 2), (2, 1), (2, 3), (3, 2), (4, 4)} );
assert(essentialSet(PI) == {(1, 2), (2, 1), (2, 3), (3, 2), (4, 5)} );
///

TEST ///
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(augmentedEssentialSet(w) == {((1, 1), 0), ((3, 5), 2), ((5, 4), 3)} );
assert(augmentedEssentialSet(I) == {((1, 2), 0), ((2, 1), 0), ((2, 3), 1), ((3, 2), 1), ((4, 4), 3)} );
assert(augmentedEssentialSet(PI) ==  {((1, 2), 0), ((2, 1), 0), ((2, 3), 1), ((3, 2), 1), ((4, 5), 3)} );
///

TEST ///
--schubDetIdeal--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

L = schubDetIdeal w;
assert(toExternalString L_0 == "z_(1,1)");
assert(toExternalString L_1 == "-z_(1,3)*z_(2,2)*z_(3,1)+z_(1,2)*z_(2,3)*z_(3,1)+z_(1,3)*z_(2,1)*z_(3,2)-z_(1,1)*z_(2,3)*z_(3,2)-z_(1,2)*z_(2,1)*z_(3,3)+z_(1,1)*z_(2,2)*z_(3,3)");
assert(toExternalString L_2 == "-z_(1,4)*z_(2,2)*z_(3,1)+z_(1,2)*z_(2,4)*z_(3,1)+z_(1,4)*z_(2,1)*z_(3,2)-z_(1,1)*z_(2,4)*z_(3,2)-z_(1,2)*z_(2,1)*z_(3,4)+z_(1,1)*z_(2,2)*z_(3,4)");
assert(toExternalString L_3 == "-z_(1,4)*z_(2,3)*z_(3,1)+z_(1,3)*z_(2,4)*z_(3,1)+z_(1,4)*z_(2,1)*z_(3,3)-z_(1,1)*z_(2,4)*z_(3,3)-z_(1,3)*z_(2,1)*z_(3,4)+z_(1,1)*z_(2,3)*z_(3,4)");
assert(toExternalString L_4 == "-z_(1,4)*z_(2,3)*z_(3,2)+z_(1,3)*z_(2,4)*z_(3,2)+z_(1,4)*z_(2,2)*z_(3,3)-z_(1,2)*z_(2,4)*z_(3,3)-z_(1,3)*z_(2,2)*z_(3,4)+z_(1,2)*z_(2,3)*z_(3,4)");
assert(toExternalString L_5 == "-z_(1,5)*z_(2,2)*z_(3,1)+z_(1,2)*z_(2,5)*z_(3,1)+z_(1,5)*z_(2,1)*z_(3,2)-z_(1,1)*z_(2,5)*z_(3,2)-z_(1,2)*z_(2,1)*z_(3,5)+z_(1,1)*z_(2,2)*z_(3,5)");
assert(toExternalString L_6 == "-z_(1,5)*z_(2,3)*z_(3,1)+z_(1,3)*z_(2,5)*z_(3,1)+z_(1,5)*z_(2,1)*z_(3,3)-z_(1,1)*z_(2,5)*z_(3,3)-z_(1,3)*z_(2,1)*z_(3,5)+z_(1,1)*z_(2,3)*z_(3,5)");
assert(toExternalString L_7 == "-z_(1,5)*z_(2,3)*z_(3,2)+z_(1,3)*z_(2,5)*z_(3,2)+z_(1,5)*z_(2,2)*z_(3,3)-z_(1,2)*z_(2,5)*z_(3,3)-z_(1,3)*z_(2,2)*z_(3,5)+z_(1,2)*z_(2,3)*z_(3,5)");
assert(toExternalString L_8 == "-z_(1,5)*z_(2,4)*z_(3,1)+z_(1,4)*z_(2,5)*z_(3,1)+z_(1,5)*z_(2,1)*z_(3,4)-z_(1,1)*z_(2,5)*z_(3,4)-z_(1,4)*z_(2,1)*z_(3,5)+z_(1,1)*z_(2,4)*z_(3,5)");
assert(toExternalString L_9 == "-z_(1,5)*z_(2,4)*z_(3,2)+z_(1,4)*z_(2,5)*z_(3,2)+z_(1,5)*z_(2,2)*z_(3,4)-z_(1,2)*z_(2,5)*z_(3,4)-z_(1,4)*z_(2,2)*z_(3,5)+z_(1,2)*z_(2,4)*z_(3,5)");
assert(toExternalString L_10 == "-z_(1,5)*z_(2,4)*z_(3,3)+z_(1,4)*z_(2,5)*z_(3,3)+z_(1,5)*z_(2,3)*z_(3,4)-z_(1,3)*z_(2,5)*z_(3,4)-z_(1,4)*z_(2,3)*z_(3,5)+z_(1,3)*z_(2,4)*z_(3,5)");
assert(toExternalString L_11 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(4,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,4)");
assert(toExternalString L_12 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(5,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(5,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(5,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(5,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(5,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(5,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(5,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(5,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(5,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(5,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(5,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(5,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(5,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(5,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(5,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(5,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(5,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(5,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(5,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(5,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(5,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(5,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(5,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(5,4)");
assert(toExternalString L_13 == "z_(1,4)*z_(2,3)*z_(4,2)*z_(5,1)-z_(1,3)*z_(2,4)*z_(4,2)*z_(5,1)-z_(1,4)*z_(2,2)*z_(4,3)*z_(5,1)+z_(1,2)*z_(2,4)*z_(4,3)*z_(5,1)+z_(1,3)*z_(2,2)*z_(4,4)*z_(5,1)-z_(1,2)*z_(2,3)*z_(4,4)*z_(5,1)-z_(1,4)*z_(2,3)*z_(4,1)*z_(5,2)+z_(1,3)*z_(2,4)*z_(4,1)*z_(5,2)+z_(1,4)*z_(2,1)*z_(4,3)*z_(5,2)-z_(1,1)*z_(2,4)*z_(4,3)*z_(5,2)-z_(1,3)*z_(2,1)*z_(4,4)*z_(5,2)+z_(1,1)*z_(2,3)*z_(4,4)*z_(5,2)+z_(1,4)*z_(2,2)*z_(4,1)*z_(5,3)-z_(1,2)*z_(2,4)*z_(4,1)*z_(5,3)-z_(1,4)*z_(2,1)*z_(4,2)*z_(5,3)+z_(1,1)*z_(2,4)*z_(4,2)*z_(5,3)+z_(1,2)*z_(2,1)*z_(4,4)*z_(5,3)-z_(1,1)*z_(2,2)*z_(4,4)*z_(5,3)-z_(1,3)*z_(2,2)*z_(4,1)*z_(5,4)+z_(1,2)*z_(2,3)*z_(4,1)*z_(5,4)+z_(1,3)*z_(2,1)*z_(4,2)*z_(5,4)-z_(1,1)*z_(2,3)*z_(4,2)*z_(5,4)-z_(1,2)*z_(2,1)*z_(4,3)*z_(5,4)+z_(1,1)*z_(2,2)*z_(4,3)*z_(5,4)");
assert(toExternalString L_14 == "z_(1,4)*z_(3,3)*z_(4,2)*z_(5,1)-z_(1,3)*z_(3,4)*z_(4,2)*z_(5,1)-z_(1,4)*z_(3,2)*z_(4,3)*z_(5,1)+z_(1,2)*z_(3,4)*z_(4,3)*z_(5,1)+z_(1,3)*z_(3,2)*z_(4,4)*z_(5,1)-z_(1,2)*z_(3,3)*z_(4,4)*z_(5,1)-z_(1,4)*z_(3,3)*z_(4,1)*z_(5,2)+z_(1,3)*z_(3,4)*z_(4,1)*z_(5,2)+z_(1,4)*z_(3,1)*z_(4,3)*z_(5,2)-z_(1,1)*z_(3,4)*z_(4,3)*z_(5,2)-z_(1,3)*z_(3,1)*z_(4,4)*z_(5,2)+z_(1,1)*z_(3,3)*z_(4,4)*z_(5,2)+z_(1,4)*z_(3,2)*z_(4,1)*z_(5,3)-z_(1,2)*z_(3,4)*z_(4,1)*z_(5,3)-z_(1,4)*z_(3,1)*z_(4,2)*z_(5,3)+z_(1,1)*z_(3,4)*z_(4,2)*z_(5,3)+z_(1,2)*z_(3,1)*z_(4,4)*z_(5,3)-z_(1,1)*z_(3,2)*z_(4,4)*z_(5,3)-z_(1,3)*z_(3,2)*z_(4,1)*z_(5,4)+z_(1,2)*z_(3,3)*z_(4,1)*z_(5,4)+z_(1,3)*z_(3,1)*z_(4,2)*z_(5,4)-z_(1,1)*z_(3,3)*z_(4,2)*z_(5,4)-z_(1,2)*z_(3,1)*z_(4,3)*z_(5,4)+z_(1,1)*z_(3,2)*z_(4,3)*z_(5,4)");
assert(toExternalString L_15 == "z_(2,4)*z_(3,3)*z_(4,2)*z_(5,1)-z_(2,3)*z_(3,4)*z_(4,2)*z_(5,1)-z_(2,4)*z_(3,2)*z_(4,3)*z_(5,1)+z_(2,2)*z_(3,4)*z_(4,3)*z_(5,1)+z_(2,3)*z_(3,2)*z_(4,4)*z_(5,1)-z_(2,2)*z_(3,3)*z_(4,4)*z_(5,1)-z_(2,4)*z_(3,3)*z_(4,1)*z_(5,2)+z_(2,3)*z_(3,4)*z_(4,1)*z_(5,2)+z_(2,4)*z_(3,1)*z_(4,3)*z_(5,2)-z_(2,1)*z_(3,4)*z_(4,3)*z_(5,2)-z_(2,3)*z_(3,1)*z_(4,4)*z_(5,2)+z_(2,1)*z_(3,3)*z_(4,4)*z_(5,2)+z_(2,4)*z_(3,2)*z_(4,1)*z_(5,3)-z_(2,2)*z_(3,4)*z_(4,1)*z_(5,3)-z_(2,4)*z_(3,1)*z_(4,2)*z_(5,3)+z_(2,1)*z_(3,4)*z_(4,2)*z_(5,3)+z_(2,2)*z_(3,1)*z_(4,4)*z_(5,3)-z_(2,1)*z_(3,2)*z_(4,4)*z_(5,3)-z_(2,3)*z_(3,2)*z_(4,1)*z_(5,4)+z_(2,2)*z_(3,3)*z_(4,1)*z_(5,4)+z_(2,3)*z_(3,1)*z_(4,2)*z_(5,4)-z_(2,1)*z_(3,3)*z_(4,2)*z_(5,4)-z_(2,2)*z_(3,1)*z_(4,3)*z_(5,4)+z_(2,1)*z_(3,2)*z_(4,3)*z_(5,4)");


L = schubDetIdeal I;
assert(toExternalString L_0 == "z_(1,1)");
assert(toExternalString L_1 == "z_(1,2)");
assert(toExternalString L_2 == "z_(2,1)");
assert(toExternalString L_3 == "-z_(1,2)*z_(2,1)+z_(1,1)*z_(2,2)");
assert(toExternalString L_4 == "-z_(1,3)*z_(2,1)+z_(1,1)*z_(2,3)");
assert(toExternalString L_5 == "-z_(1,3)*z_(2,2)+z_(1,2)*z_(2,3)");
assert(toExternalString L_6 == "-z_(1,2)*z_(3,1)+z_(1,1)*z_(3,2)");
assert(toExternalString L_7 == "-z_(2,2)*z_(3,1)+z_(2,1)*z_(3,2)");
assert(toExternalString L_8 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(4,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,4)");


L = schubDetIdeal PI;
assert(numgens L == 13);
assert(toExternalString L_0 == "z_(1,1)");
assert(toExternalString L_1 == "z_(1,2)");
assert(toExternalString L_2 == "z_(2,1)");
assert(toExternalString L_3 == "-z_(1,2)*z_(2,1)+z_(1,1)*z_(2,2)");
assert(toExternalString L_4 == "-z_(1,3)*z_(2,1)+z_(1,1)*z_(2,3)");
assert(toExternalString L_5 == "-z_(1,3)*z_(2,2)+z_(1,2)*z_(2,3)");
assert(toExternalString L_6 == "-z_(1,2)*z_(3,1)+z_(1,1)*z_(3,2)");
assert(toExternalString L_7 == "-z_(2,2)*z_(3,1)+z_(2,1)*z_(3,2)");
assert(toExternalString L_8 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(4,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,4)");
assert(toExternalString L_9 == "z_(1,5)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,5)*z_(3,2)*z_(4,1)-z_(1,5)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,5)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,5)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,5)*z_(4,1)-z_(1,5)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,5)*z_(3,1)*z_(4,2)+z_(1,5)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,5)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,5)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,5)*z_(4,2)+z_(1,5)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,5)*z_(3,1)*z_(4,3)-z_(1,5)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,5)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,5)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,5)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,5)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,5)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,5)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,5)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,5)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,5)");
assert(toExternalString L_10 == "z_(1,5)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,5)*z_(3,2)*z_(4,1)-z_(1,5)*z_(2,2)*z_(3,4)*z_(4,1)+z_(1,2)*z_(2,5)*z_(3,4)*z_(4,1)+z_(1,4)*z_(2,2)*z_(3,5)*z_(4,1)-z_(1,2)*z_(2,4)*z_(3,5)*z_(4,1)-z_(1,5)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,5)*z_(3,1)*z_(4,2)+z_(1,5)*z_(2,1)*z_(3,4)*z_(4,2)-z_(1,1)*z_(2,5)*z_(3,4)*z_(4,2)-z_(1,4)*z_(2,1)*z_(3,5)*z_(4,2)+z_(1,1)*z_(2,4)*z_(3,5)*z_(4,2)+z_(1,5)*z_(2,2)*z_(3,1)*z_(4,4)-z_(1,2)*z_(2,5)*z_(3,1)*z_(4,4)-z_(1,5)*z_(2,1)*z_(3,2)*z_(4,4)+z_(1,1)*z_(2,5)*z_(3,2)*z_(4,4)+z_(1,2)*z_(2,1)*z_(3,5)*z_(4,4)-z_(1,1)*z_(2,2)*z_(3,5)*z_(4,4)-z_(1,4)*z_(2,2)*z_(3,1)*z_(4,5)+z_(1,2)*z_(2,4)*z_(3,1)*z_(4,5)+z_(1,4)*z_(2,1)*z_(3,2)*z_(4,5)-z_(1,1)*z_(2,4)*z_(3,2)*z_(4,5)-z_(1,2)*z_(2,1)*z_(3,4)*z_(4,5)+z_(1,1)*z_(2,2)*z_(3,4)*z_(4,5)");
assert(toExternalString L_11 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,1)-z_(1,4)*z_(2,5)*z_(3,3)*z_(4,1)-z_(1,5)*z_(2,3)*z_(3,4)*z_(4,1)+z_(1,3)*z_(2,5)*z_(3,4)*z_(4,1)+z_(1,4)*z_(2,3)*z_(3,5)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,5)*z_(4,1)-z_(1,5)*z_(2,4)*z_(3,1)*z_(4,3)+z_(1,4)*z_(2,5)*z_(3,1)*z_(4,3)+z_(1,5)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,5)*z_(3,4)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,5)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,5)*z_(4,3)+z_(1,5)*z_(2,3)*z_(3,1)*z_(4,4)-z_(1,3)*z_(2,5)*z_(3,1)*z_(4,4)-z_(1,5)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,5)*z_(3,3)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,5)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,5)*z_(4,4)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,5)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,5)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,5)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,5)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,5)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,5)");
assert(toExternalString L_12 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,4)*z_(2,5)*z_(3,3)*z_(4,2)-z_(1,5)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,3)*z_(2,5)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,3)*z_(3,5)*z_(4,2)-z_(1,3)*z_(2,4)*z_(3,5)*z_(4,2)-z_(1,5)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,4)*z_(2,5)*z_(3,2)*z_(4,3)+z_(1,5)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,2)*z_(2,5)*z_(3,4)*z_(4,3)-z_(1,4)*z_(2,2)*z_(3,5)*z_(4,3)+z_(1,2)*z_(2,4)*z_(3,5)*z_(4,3)+z_(1,5)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,3)*z_(2,5)*z_(3,2)*z_(4,4)-z_(1,5)*z_(2,2)*z_(3,3)*z_(4,4)+z_(1,2)*z_(2,5)*z_(3,3)*z_(4,4)+z_(1,3)*z_(2,2)*z_(3,5)*z_(4,4)-z_(1,2)*z_(2,3)*z_(3,5)*z_(4,4)-z_(1,4)*z_(2,3)*z_(3,2)*z_(4,5)+z_(1,3)*z_(2,4)*z_(3,2)*z_(4,5)+z_(1,4)*z_(2,2)*z_(3,3)*z_(4,5)-z_(1,2)*z_(2,4)*z_(3,3)*z_(4,5)-z_(1,3)*z_(2,2)*z_(3,4)*z_(4,5)+z_(1,2)*z_(2,3)*z_(3,4)*z_(4,5)");
///

TEST ///
--fultonGens--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

L = fultonGens w; 
assert(# L == 16);
assert(toExternalString L_0 == "z_(1,1)" );
assert(toExternalString L_1 == "-z_(1,3)*z_(2,2)*z_(3,1)+z_(1,2)*z_(2,3)*z_(3,1)+z_(1,3)*z_(2,1)*z_(3,2)-z_(1,1)*z_(2,3)*z_(3,2)-z_(1,2)*z_(2,1)*z_(3,3)+z_(1,1)*z_(2,2)*z_(3,3)" );
assert(toExternalString L_2 == "-z_(1,4)*z_(2,2)*z_(3,1)+z_(1,2)*z_(2,4)*z_(3,1)+z_(1,4)*z_(2,1)*z_(3,2)-z_(1,1)*z_(2,4)*z_(3,2)-z_(1,2)*z_(2,1)*z_(3,4)+z_(1,1)*z_(2,2)*z_(3,4)" );
assert(toExternalString L_3 == "-z_(1,4)*z_(2,3)*z_(3,1)+z_(1,3)*z_(2,4)*z_(3,1)+z_(1,4)*z_(2,1)*z_(3,3)-z_(1,1)*z_(2,4)*z_(3,3)-z_(1,3)*z_(2,1)*z_(3,4)+z_(1,1)*z_(2,3)*z_(3,4)" );
assert(toExternalString L_4 == "-z_(1,4)*z_(2,3)*z_(3,2)+z_(1,3)*z_(2,4)*z_(3,2)+z_(1,4)*z_(2,2)*z_(3,3)-z_(1,2)*z_(2,4)*z_(3,3)-z_(1,3)*z_(2,2)*z_(3,4)+z_(1,2)*z_(2,3)*z_(3,4)" );
assert(toExternalString L_5 == "-z_(1,5)*z_(2,2)*z_(3,1)+z_(1,2)*z_(2,5)*z_(3,1)+z_(1,5)*z_(2,1)*z_(3,2)-z_(1,1)*z_(2,5)*z_(3,2)-z_(1,2)*z_(2,1)*z_(3,5)+z_(1,1)*z_(2,2)*z_(3,5)" );
assert(toExternalString L_6 == "-z_(1,5)*z_(2,3)*z_(3,1)+z_(1,3)*z_(2,5)*z_(3,1)+z_(1,5)*z_(2,1)*z_(3,3)-z_(1,1)*z_(2,5)*z_(3,3)-z_(1,3)*z_(2,1)*z_(3,5)+z_(1,1)*z_(2,3)*z_(3,5)" );
assert(toExternalString L_7 == "-z_(1,5)*z_(2,3)*z_(3,2)+z_(1,3)*z_(2,5)*z_(3,2)+z_(1,5)*z_(2,2)*z_(3,3)-z_(1,2)*z_(2,5)*z_(3,3)-z_(1,3)*z_(2,2)*z_(3,5)+z_(1,2)*z_(2,3)*z_(3,5)" );
assert(toExternalString L_8 == "-z_(1,5)*z_(2,4)*z_(3,1)+z_(1,4)*z_(2,5)*z_(3,1)+z_(1,5)*z_(2,1)*z_(3,4)-z_(1,1)*z_(2,5)*z_(3,4)-z_(1,4)*z_(2,1)*z_(3,5)+z_(1,1)*z_(2,4)*z_(3,5)" );
assert(toExternalString L_9 == "-z_(1,5)*z_(2,4)*z_(3,2)+z_(1,4)*z_(2,5)*z_(3,2)+z_(1,5)*z_(2,2)*z_(3,4)-z_(1,2)*z_(2,5)*z_(3,4)-z_(1,4)*z_(2,2)*z_(3,5)+z_(1,2)*z_(2,4)*z_(3,5)" );
assert(toExternalString L_10 == "-z_(1,5)*z_(2,4)*z_(3,3)+z_(1,4)*z_(2,5)*z_(3,3)+z_(1,5)*z_(2,3)*z_(3,4)-z_(1,3)*z_(2,5)*z_(3,4)-z_(1,4)*z_(2,3)*z_(3,5)+z_(1,3)*z_(2,4)*z_(3,5)" );
assert(toExternalString L_11 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(4,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,4)" );
assert(toExternalString L_12 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(5,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(5,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(5,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(5,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(5,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(5,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(5,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(5,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(5,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(5,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(5,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(5,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(5,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(5,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(5,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(5,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(5,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(5,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(5,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(5,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(5,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(5,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(5,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(5,4)" );
assert(toExternalString L_13 == "z_(1,4)*z_(2,3)*z_(4,2)*z_(5,1)-z_(1,3)*z_(2,4)*z_(4,2)*z_(5,1)-z_(1,4)*z_(2,2)*z_(4,3)*z_(5,1)+z_(1,2)*z_(2,4)*z_(4,3)*z_(5,1)+z_(1,3)*z_(2,2)*z_(4,4)*z_(5,1)-z_(1,2)*z_(2,3)*z_(4,4)*z_(5,1)-z_(1,4)*z_(2,3)*z_(4,1)*z_(5,2)+z_(1,3)*z_(2,4)*z_(4,1)*z_(5,2)+z_(1,4)*z_(2,1)*z_(4,3)*z_(5,2)-z_(1,1)*z_(2,4)*z_(4,3)*z_(5,2)-z_(1,3)*z_(2,1)*z_(4,4)*z_(5,2)+z_(1,1)*z_(2,3)*z_(4,4)*z_(5,2)+z_(1,4)*z_(2,2)*z_(4,1)*z_(5,3)-z_(1,2)*z_(2,4)*z_(4,1)*z_(5,3)-z_(1,4)*z_(2,1)*z_(4,2)*z_(5,3)+z_(1,1)*z_(2,4)*z_(4,2)*z_(5,3)+z_(1,2)*z_(2,1)*z_(4,4)*z_(5,3)-z_(1,1)*z_(2,2)*z_(4,4)*z_(5,3)-z_(1,3)*z_(2,2)*z_(4,1)*z_(5,4)+z_(1,2)*z_(2,3)*z_(4,1)*z_(5,4)+z_(1,3)*z_(2,1)*z_(4,2)*z_(5,4)-z_(1,1)*z_(2,3)*z_(4,2)*z_(5,4)-z_(1,2)*z_(2,1)*z_(4,3)*z_(5,4)+z_(1,1)*z_(2,2)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_14 == "z_(1,4)*z_(3,3)*z_(4,2)*z_(5,1)-z_(1,3)*z_(3,4)*z_(4,2)*z_(5,1)-z_(1,4)*z_(3,2)*z_(4,3)*z_(5,1)+z_(1,2)*z_(3,4)*z_(4,3)*z_(5,1)+z_(1,3)*z_(3,2)*z_(4,4)*z_(5,1)-z_(1,2)*z_(3,3)*z_(4,4)*z_(5,1)-z_(1,4)*z_(3,3)*z_(4,1)*z_(5,2)+z_(1,3)*z_(3,4)*z_(4,1)*z_(5,2)+z_(1,4)*z_(3,1)*z_(4,3)*z_(5,2)-z_(1,1)*z_(3,4)*z_(4,3)*z_(5,2)-z_(1,3)*z_(3,1)*z_(4,4)*z_(5,2)+z_(1,1)*z_(3,3)*z_(4,4)*z_(5,2)+z_(1,4)*z_(3,2)*z_(4,1)*z_(5,3)-z_(1,2)*z_(3,4)*z_(4,1)*z_(5,3)-z_(1,4)*z_(3,1)*z_(4,2)*z_(5,3)+z_(1,1)*z_(3,4)*z_(4,2)*z_(5,3)+z_(1,2)*z_(3,1)*z_(4,4)*z_(5,3)-z_(1,1)*z_(3,2)*z_(4,4)*z_(5,3)-z_(1,3)*z_(3,2)*z_(4,1)*z_(5,4)+z_(1,2)*z_(3,3)*z_(4,1)*z_(5,4)+z_(1,3)*z_(3,1)*z_(4,2)*z_(5,4)-z_(1,1)*z_(3,3)*z_(4,2)*z_(5,4)-z_(1,2)*z_(3,1)*z_(4,3)*z_(5,4)+z_(1,1)*z_(3,2)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_15 == "z_(2,4)*z_(3,3)*z_(4,2)*z_(5,1)-z_(2,3)*z_(3,4)*z_(4,2)*z_(5,1)-z_(2,4)*z_(3,2)*z_(4,3)*z_(5,1)+z_(2,2)*z_(3,4)*z_(4,3)*z_(5,1)+z_(2,3)*z_(3,2)*z_(4,4)*z_(5,1)-z_(2,2)*z_(3,3)*z_(4,4)*z_(5,1)-z_(2,4)*z_(3,3)*z_(4,1)*z_(5,2)+z_(2,3)*z_(3,4)*z_(4,1)*z_(5,2)+z_(2,4)*z_(3,1)*z_(4,3)*z_(5,2)-z_(2,1)*z_(3,4)*z_(4,3)*z_(5,2)-z_(2,3)*z_(3,1)*z_(4,4)*z_(5,2)+z_(2,1)*z_(3,3)*z_(4,4)*z_(5,2)+z_(2,4)*z_(3,2)*z_(4,1)*z_(5,3)-z_(2,2)*z_(3,4)*z_(4,1)*z_(5,3)-z_(2,4)*z_(3,1)*z_(4,2)*z_(5,3)+z_(2,1)*z_(3,4)*z_(4,2)*z_(5,3)+z_(2,2)*z_(3,1)*z_(4,4)*z_(5,3)-z_(2,1)*z_(3,2)*z_(4,4)*z_(5,3)-z_(2,3)*z_(3,2)*z_(4,1)*z_(5,4)+z_(2,2)*z_(3,3)*z_(4,1)*z_(5,4)+z_(2,3)*z_(3,1)*z_(4,2)*z_(5,4)-z_(2,1)*z_(3,3)*z_(4,2)*z_(5,4)-z_(2,2)*z_(3,1)*z_(4,3)*z_(5,4)+z_(2,1)*z_(3,2)*z_(4,3)*z_(5,4)" );

L = fultonGens I;
assert(# L == 9); 
assert(toExternalString L_0 == "z_(1,1)" );
assert(toExternalString L_1 == "z_(1,2)" );
assert(toExternalString L_2 == "z_(2,1)" );
assert(toExternalString L_3 == "-z_(1,2)*z_(2,1)+z_(1,1)*z_(2,2)" );
assert(toExternalString L_4 == "-z_(1,3)*z_(2,1)+z_(1,1)*z_(2,3)" );
assert(toExternalString L_5 == "-z_(1,3)*z_(2,2)+z_(1,2)*z_(2,3)" );
assert(toExternalString L_6 == "-z_(1,2)*z_(3,1)+z_(1,1)*z_(3,2)" );
assert(toExternalString L_7 == "-z_(2,2)*z_(3,1)+z_(2,1)*z_(3,2)" );
assert(toExternalString L_8 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(4,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,4)" );

L = fultonGens PI; 
assert(# L == 13);
assert(toExternalString L_0 == "z_(1,1)" );
assert(toExternalString L_1 == "z_(1,2)" );
assert(toExternalString L_2 == "z_(2,1)" );
assert(toExternalString L_3 == "-z_(1,2)*z_(2,1)+z_(1,1)*z_(2,2)" );
assert(toExternalString L_4 == "-z_(1,3)*z_(2,1)+z_(1,1)*z_(2,3)" );
assert(toExternalString L_5 == "-z_(1,3)*z_(2,2)+z_(1,2)*z_(2,3)" );
assert(toExternalString L_6 == "-z_(1,2)*z_(3,1)+z_(1,1)*z_(3,2)" );
assert(toExternalString L_7 == "-z_(2,2)*z_(3,1)+z_(2,1)*z_(3,2)" );
assert(toExternalString L_8 == "z_(1,4)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,4)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,4)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,4)*z_(4,1)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,4)*z_(3,1)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,4)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,4)" );
assert(toExternalString L_9 == "z_(1,5)*z_(2,3)*z_(3,2)*z_(4,1)-z_(1,3)*z_(2,5)*z_(3,2)*z_(4,1)-z_(1,5)*z_(2,2)*z_(3,3)*z_(4,1)+z_(1,2)*z_(2,5)*z_(3,3)*z_(4,1)+z_(1,3)*z_(2,2)*z_(3,5)*z_(4,1)-z_(1,2)*z_(2,3)*z_(3,5)*z_(4,1)-z_(1,5)*z_(2,3)*z_(3,1)*z_(4,2)+z_(1,3)*z_(2,5)*z_(3,1)*z_(4,2)+z_(1,5)*z_(2,1)*z_(3,3)*z_(4,2)-z_(1,1)*z_(2,5)*z_(3,3)*z_(4,2)-z_(1,3)*z_(2,1)*z_(3,5)*z_(4,2)+z_(1,1)*z_(2,3)*z_(3,5)*z_(4,2)+z_(1,5)*z_(2,2)*z_(3,1)*z_(4,3)-z_(1,2)*z_(2,5)*z_(3,1)*z_(4,3)-z_(1,5)*z_(2,1)*z_(3,2)*z_(4,3)+z_(1,1)*z_(2,5)*z_(3,2)*z_(4,3)+z_(1,2)*z_(2,1)*z_(3,5)*z_(4,3)-z_(1,1)*z_(2,2)*z_(3,5)*z_(4,3)-z_(1,3)*z_(2,2)*z_(3,1)*z_(4,5)+z_(1,2)*z_(2,3)*z_(3,1)*z_(4,5)+z_(1,3)*z_(2,1)*z_(3,2)*z_(4,5)-z_(1,1)*z_(2,3)*z_(3,2)*z_(4,5)-z_(1,2)*z_(2,1)*z_(3,3)*z_(4,5)+z_(1,1)*z_(2,2)*z_(3,3)*z_(4,5)" );
assert(toExternalString L_10 == "z_(1,5)*z_(2,4)*z_(3,2)*z_(4,1)-z_(1,4)*z_(2,5)*z_(3,2)*z_(4,1)-z_(1,5)*z_(2,2)*z_(3,4)*z_(4,1)+z_(1,2)*z_(2,5)*z_(3,4)*z_(4,1)+z_(1,4)*z_(2,2)*z_(3,5)*z_(4,1)-z_(1,2)*z_(2,4)*z_(3,5)*z_(4,1)-z_(1,5)*z_(2,4)*z_(3,1)*z_(4,2)+z_(1,4)*z_(2,5)*z_(3,1)*z_(4,2)+z_(1,5)*z_(2,1)*z_(3,4)*z_(4,2)-z_(1,1)*z_(2,5)*z_(3,4)*z_(4,2)-z_(1,4)*z_(2,1)*z_(3,5)*z_(4,2)+z_(1,1)*z_(2,4)*z_(3,5)*z_(4,2)+z_(1,5)*z_(2,2)*z_(3,1)*z_(4,4)-z_(1,2)*z_(2,5)*z_(3,1)*z_(4,4)-z_(1,5)*z_(2,1)*z_(3,2)*z_(4,4)+z_(1,1)*z_(2,5)*z_(3,2)*z_(4,4)+z_(1,2)*z_(2,1)*z_(3,5)*z_(4,4)-z_(1,1)*z_(2,2)*z_(3,5)*z_(4,4)-z_(1,4)*z_(2,2)*z_(3,1)*z_(4,5)+z_(1,2)*z_(2,4)*z_(3,1)*z_(4,5)+z_(1,4)*z_(2,1)*z_(3,2)*z_(4,5)-z_(1,1)*z_(2,4)*z_(3,2)*z_(4,5)-z_(1,2)*z_(2,1)*z_(3,4)*z_(4,5)+z_(1,1)*z_(2,2)*z_(3,4)*z_(4,5)" );
assert(toExternalString L_11 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,1)-z_(1,4)*z_(2,5)*z_(3,3)*z_(4,1)-z_(1,5)*z_(2,3)*z_(3,4)*z_(4,1)+z_(1,3)*z_(2,5)*z_(3,4)*z_(4,1)+z_(1,4)*z_(2,3)*z_(3,5)*z_(4,1)-z_(1,3)*z_(2,4)*z_(3,5)*z_(4,1)-z_(1,5)*z_(2,4)*z_(3,1)*z_(4,3)+z_(1,4)*z_(2,5)*z_(3,1)*z_(4,3)+z_(1,5)*z_(2,1)*z_(3,4)*z_(4,3)-z_(1,1)*z_(2,5)*z_(3,4)*z_(4,3)-z_(1,4)*z_(2,1)*z_(3,5)*z_(4,3)+z_(1,1)*z_(2,4)*z_(3,5)*z_(4,3)+z_(1,5)*z_(2,3)*z_(3,1)*z_(4,4)-z_(1,3)*z_(2,5)*z_(3,1)*z_(4,4)-z_(1,5)*z_(2,1)*z_(3,3)*z_(4,4)+z_(1,1)*z_(2,5)*z_(3,3)*z_(4,4)+z_(1,3)*z_(2,1)*z_(3,5)*z_(4,4)-z_(1,1)*z_(2,3)*z_(3,5)*z_(4,4)-z_(1,4)*z_(2,3)*z_(3,1)*z_(4,5)+z_(1,3)*z_(2,4)*z_(3,1)*z_(4,5)+z_(1,4)*z_(2,1)*z_(3,3)*z_(4,5)-z_(1,1)*z_(2,4)*z_(3,3)*z_(4,5)-z_(1,3)*z_(2,1)*z_(3,4)*z_(4,5)+z_(1,1)*z_(2,3)*z_(3,4)*z_(4,5)" );
assert(toExternalString L_12 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,2)-z_(1,4)*z_(2,5)*z_(3,3)*z_(4,2)-z_(1,5)*z_(2,3)*z_(3,4)*z_(4,2)+z_(1,3)*z_(2,5)*z_(3,4)*z_(4,2)+z_(1,4)*z_(2,3)*z_(3,5)*z_(4,2)-z_(1,3)*z_(2,4)*z_(3,5)*z_(4,2)-z_(1,5)*z_(2,4)*z_(3,2)*z_(4,3)+z_(1,4)*z_(2,5)*z_(3,2)*z_(4,3)+z_(1,5)*z_(2,2)*z_(3,4)*z_(4,3)-z_(1,2)*z_(2,5)*z_(3,4)*z_(4,3)-z_(1,4)*z_(2,2)*z_(3,5)*z_(4,3)+z_(1,2)*z_(2,4)*z_(3,5)*z_(4,3)+z_(1,5)*z_(2,3)*z_(3,2)*z_(4,4)-z_(1,3)*z_(2,5)*z_(3,2)*z_(4,4)-z_(1,5)*z_(2,2)*z_(3,3)*z_(4,4)+z_(1,2)*z_(2,5)*z_(3,3)*z_(4,4)+z_(1,3)*z_(2,2)*z_(3,5)*z_(4,4)-z_(1,2)*z_(2,3)*z_(3,5)*z_(4,4)-z_(1,4)*z_(2,3)*z_(3,2)*z_(4,5)+z_(1,3)*z_(2,4)*z_(3,2)*z_(4,5)+z_(1,4)*z_(2,2)*z_(3,3)*z_(4,5)-z_(1,2)*z_(2,4)*z_(3,3)*z_(4,5)-z_(1,3)*z_(2,2)*z_(3,4)*z_(4,5)+z_(1,2)*z_(2,3)*z_(3,4)*z_(4,5)" );
///

TEST ///
--diagLexInitSE--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

L = diagLexInitSE w; 
assert(numgens L == 17);
assert(toExternalString L_0 == "z_(5,4)*z_(4,3)*z_(3,2)*z_(2,1)" );
assert(toExternalString L_1 == "z_(5,4)*z_(4,3)*z_(3,5)*z_(3,1)*z_(2,2)*z_(1,4)" );
assert(toExternalString L_2 == "z_(3,5)*z_(2,1)*z_(1,4)" );
assert(toExternalString L_3 == "z_(3,5)*z_(2,4)*z_(1,3)" );
assert(toExternalString L_4 == "z_(5,4)*z_(4,3)*z_(3,5)*z_(3,1)*z_(2,2)*z_(1,3)" );
assert(toExternalString L_5 == "z_(5,4)*z_(4,3)*z_(3,4)*z_(3,1)*z_(2,2)*z_(1,3)" );
assert(toExternalString L_6 == "z_(3,5)*z_(2,1)*z_(1,3)" );
assert(toExternalString L_7 == "z_(3,4)*z_(2,1)*z_(1,3)" );
assert(toExternalString L_8 == "z_(5,4)*z_(4,3)*z_(3,1)*z_(1,2)" );
assert(toExternalString L_9 == "z_(3,5)*z_(2,4)*z_(1,2)" );
assert(toExternalString L_10 == "z_(3,5)*z_(2,3)*z_(1,2)" );
assert(toExternalString L_11 == "z_(3,4)*z_(2,3)*z_(1,2)" );
assert(toExternalString L_12 == "z_(5,4)*z_(4,3)*z_(2,1)*z_(1,2)" );
assert(toExternalString L_13 == "z_(3,5)*z_(2,1)*z_(1,2)" );
assert(toExternalString L_14 == "z_(3,4)*z_(2,1)*z_(1,2)" );
assert(toExternalString L_15 == "z_(3,3)*z_(2,1)*z_(1,2)" );
assert(toExternalString L_16 == "z_(1,1)" );

L = diagLexInitSE I; 
assert(numgens L == 7);
assert(toExternalString L_0 == "z_(3,1)*z_(2,2)" );
assert(toExternalString L_1 == "z_(2,1)" );
assert(toExternalString L_2 == "z_(4,1)*z_(3,3)*z_(2,2)^2*z_(1,4)" );
assert(toExternalString L_3 == "z_(4,2)*z_(3,1)*z_(2,4)*z_(1,3)" );
assert(toExternalString L_4 == "z_(2,2)*z_(1,3)" );
assert(toExternalString L_5 == "z_(1,2)" );
assert(toExternalString L_6 == "z_(1,1)" );

L = diagLexInitSE PI; 
assert(numgens L == 16);
assert(toExternalString L_0 == "z_(3,1)*z_(2,2)" );
assert(toExternalString L_1 == "z_(2,1)" );
assert(toExternalString L_2 == "z_(4,1)*z_(3,3)*z_(2,2)^2*z_(1,5)" );
assert(toExternalString L_3 == "z_(4,2)*z_(3,1)*z_(2,5)*z_(1,4)" );
assert(toExternalString L_4 == "z_(4,5)*z_(3,3)*z_(2,2)*z_(1,4)" );
assert(toExternalString L_5 == "z_(4,1)*z_(3,5)*z_(2,3)*z_(2,2)*z_(1,4)" );
assert(toExternalString L_6 == "z_(4,1)*z_(3,5)*z_(2,2)^2*z_(1,4)" );
assert(toExternalString L_7 == "z_(4,1)*z_(3,3)*z_(2,2)^2*z_(1,4)" );
assert(toExternalString L_8 == "z_(4,2)*z_(3,1)*z_(2,5)*z_(1,3)" );
assert(toExternalString L_9 == "z_(4,5)*z_(3,1)*z_(2,4)*z_(1,3)" );
assert(toExternalString L_10 == "z_(4,2)*z_(3,1)*z_(2,4)*z_(1,3)" );
assert(toExternalString L_11 == "z_(4,5)*z_(4,1)*z_(3,5)*z_(3,2)*z_(2,4)*z_(2,3)*z_(1,3)" );
assert(toExternalString L_12 == "z_(2,2)*z_(1,3)" );
assert(toExternalString L_13 == "z_(4,5)*z_(3,2)*z_(2,4)*z_(1,3)^2" );
assert(toExternalString L_14 == "z_(1,2)" );
assert(toExternalString L_15 == "z_(1,1)" );
///

TEST ///
--diagLexInitNW--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

L = diagLexInitNW w; 
assert(numgens L == 17);
assert(toExternalString L_0 == "z_(1,1)" );
assert(toExternalString L_1 == "z_(1,2)*z_(2,1)*z_(3,3)" );
assert(toExternalString L_2 == "z_(1,2)*z_(2,1)*z_(3,4)" );
assert(toExternalString L_3 == "z_(1,3)*z_(2,1)*z_(3,4)" );
assert(toExternalString L_4 == "z_(1,2)*z_(2,3)*z_(3,4)" );
assert(toExternalString L_5 == "z_(1,2)*z_(2,1)*z_(3,5)" );
assert(toExternalString L_6 == "z_(1,3)*z_(2,1)*z_(3,5)" );
assert(toExternalString L_7 == "z_(1,4)*z_(2,1)*z_(3,5)" );
assert(toExternalString L_8 == "z_(1,2)*z_(2,3)*z_(3,5)" );
assert(toExternalString L_9 == "z_(1,2)*z_(2,4)*z_(3,5)" );
assert(toExternalString L_10 == "z_(1,3)*z_(2,4)*z_(3,5)" );
assert(toExternalString L_11 == "z_(1,2)*z_(2,1)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_12 == "z_(1,2)*z_(3,1)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_13 == "z_(2,1)*z_(3,2)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_14 == "z_(1,3)*z_(2,2)*z_(3,1)*z_(3,4)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_15 == "z_(1,3)*z_(2,2)*z_(3,1)*z_(3,5)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_16 == "z_(1,4)*z_(2,2)*z_(3,1)*z_(3,5)*z_(4,3)*z_(5,4)" );

L = diagLexInitNW I; 
assert(numgens L == 7);
assert(toExternalString L_0 == "z_(1,1)" );
assert(toExternalString L_1 == "z_(1,2)" );
assert(toExternalString L_2 == "z_(2,1)" );
assert(toExternalString L_3 == "z_(1,3)*z_(2,2)" );
assert(toExternalString L_4 == "z_(2,2)*z_(3,1)" );
assert(toExternalString L_5 == "z_(1,4)*z_(2,2)^2*z_(3,3)*z_(4,1)" );
assert(toExternalString L_6 == "z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)" );

L = diagLexInitNW PI; 
assert(numgens L == 16);
assert(toExternalString L_0 == "z_(1,1)" );
assert(toExternalString L_1 == "z_(1,2)" );
assert(toExternalString L_2 == "z_(2,1)" );
assert(toExternalString L_3 == "z_(1,3)*z_(2,2)" );
assert(toExternalString L_4 == "z_(2,2)*z_(3,1)" );
assert(toExternalString L_5 == "z_(1,4)*z_(2,2)^2*z_(3,3)*z_(4,1)" );
assert(toExternalString L_6 == "z_(1,5)*z_(2,2)^2*z_(3,3)*z_(4,1)" );
assert(toExternalString L_7 == "z_(1,4)*z_(2,2)*z_(2,5)*z_(3,3)*z_(4,1)" );
assert(toExternalString L_8 == "z_(1,4)*z_(2,2)*z_(3,5)*z_(4,1)" );
assert(toExternalString L_9 == "z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)" );
assert(toExternalString L_10 == "z_(1,3)*z_(2,5)*z_(3,1)*z_(4,2)" );
assert(toExternalString L_11 == "z_(1,4)*z_(2,5)*z_(3,1)^2*z_(4,2)" );
assert(toExternalString L_12 == "z_(1,4)*z_(2,3)*z_(2,5)*z_(3,1)*z_(3,5)*z_(4,2)" );
assert(toExternalString L_13 == "z_(1,3)*z_(2,4)*z_(3,1)*z_(4,5)" );
assert(toExternalString L_14 == "z_(1,3)*z_(2,4)*z_(3,2)*z_(4,5)" );
assert(toExternalString L_15 == "z_(1,4)*z_(2,2)^2*z_(3,3)*z_(4,5)" );
///

TEST ///
--diagRevLexInit--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

L = diagRevLexInit w; 
assert(numgens L == 17);
assert(toExternalString L_0 == "z_(1,1)" );
assert(toExternalString L_1 == "z_(1,3)*z_(2,4)*z_(3,5)" );
assert(toExternalString L_2 == "z_(1,2)*z_(2,4)*z_(3,5)" );
assert(toExternalString L_3 == "z_(1,2)*z_(2,3)*z_(3,5)" );
assert(toExternalString L_4 == "z_(1,4)*z_(2,1)*z_(3,5)" );
assert(toExternalString L_5 == "z_(1,3)*z_(2,1)*z_(3,5)" );
assert(toExternalString L_6 == "z_(1,2)*z_(2,1)*z_(3,5)" );
assert(toExternalString L_7 == "z_(1,2)*z_(2,3)*z_(3,4)" );
assert(toExternalString L_8 == "z_(1,3)*z_(2,1)*z_(3,4)" );
assert(toExternalString L_9 == "z_(1,2)*z_(2,1)*z_(3,4)" );
assert(toExternalString L_10 == "z_(1,2)*z_(2,1)*z_(3,3)" );
assert(toExternalString L_11 == "z_(1,2)*z_(2,1)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_12 == "z_(2,1)*z_(3,2)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_13 == "z_(1,2)*z_(3,1)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_14 == "z_(1,4)*z_(2,2)*z_(3,5)*z_(3,1)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_15 == "z_(1,3)*z_(2,2)*z_(3,5)*z_(3,1)*z_(4,3)*z_(5,4)" );
assert(toExternalString L_16 == "z_(1,3)*z_(2,2)*z_(3,4)*z_(3,1)*z_(4,3)*z_(5,4)" );

L = diagRevLexInit I; 
assert(numgens L == 7);
assert(toExternalString L_0 == "z_(1,2)" );
assert(toExternalString L_1 == "z_(1,1)" );
assert(toExternalString L_2 == "z_(1,3)*z_(2,2)" );
assert(toExternalString L_3 == "z_(2,1)" );
assert(toExternalString L_4 == "z_(2,2)*z_(3,1)" );
assert(toExternalString L_5 == "z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)" );
assert(toExternalString L_6 == "z_(1,4)*z_(2,2)^2*z_(3,3)*z_(4,1)" );

L = diagRevLexInit PI; 
assert(numgens L == 13);
assert(toExternalString L_0 == "z_(1,2)" );
assert(toExternalString L_1 == "z_(1,1)" );
assert(toExternalString L_2 == "z_(1,3)*z_(2,2)" );
assert(toExternalString L_3 == "z_(2,1)" );
assert(toExternalString L_4 == "z_(2,2)*z_(3,1)" );
assert(toExternalString L_5 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,2)");
assert(toExternalString L_6 == "z_(1,5)*z_(2,4)*z_(3,1)*z_(4,2)");
assert(toExternalString L_7 == "z_(1,3)*z_(2,4)*z_(3,1)*z_(4,2)");
assert(toExternalString L_8 == "z_(1,5)*z_(2,3)*z_(3,1)*z_(4,2)");
assert(toExternalString L_9 == "z_(1,5)*z_(2,4)*z_(3,3)*z_(4,1)");
assert(toExternalString L_10 == "z_(1,5)*z_(2,2)^2*z_(3,3)*z_(4,1)");
assert(toExternalString L_11 == "z_(1,4)*z_(2,2)^2*z_(3,3)*z_(4,1)");
assert(toExternalString L_12 == "z_(1,5)*z_(2,4)*z_(2,2)*z_(3,2)*z_(4,1)");
///

--subwordComplex--
--Needs to be added to other file.
--Code needs to be adjusted so that handles identity permutation as a special case.

--entrywiseMinRankTable--
--Example in other file.

--entrywiseMaxRankTable--
--Example in other file.

TEST ///
--schubDecomposition--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(flatten schubDecomposition schubDetIdeal w == w)
assert(schubDecomposition schubDetIdeal I == {{3, 5, 1, 2, 4}, {5, 2, 3, 1, 4}, {4, 2, 5, 1, 3}, {3, 4, 1, 5, 2}, {4, 2, 3, 5, 1}})
--PI buggy.
///

TEST ///
--permOverASM--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(permOverASM I == {{3, 5, 1, 2, 4}, {5, 2, 3, 1, 4}, {4, 2, 5, 1, 3}, {3, 4, 1, 5, 2}, {4, 2, 3, 5, 1}})
///

TEST ///
--isIntersectionSchubIdeals--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(isIntersectionSchubIdeals schubDetIdeal w == true );
assert(isIntersectionSchubIdeals schubDetIdeal I == true );
--PI buggy
///

TEST ///
--isASMIdeal--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(isASMIdeal schubDetIdeal w == true );
assert(isASMIdeal schubDetIdeal I == true );
--PI buggy
///


--isASMUnion--
--Examples in other file

TEST ///
--getASM--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(getASM schubDetIdeal w == matrix{{0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 1}, {0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 0}, {0, 0, 0, 1, 0, 0}} );
assert(getASM schubDetIdeal I == I );
--PI buggy
///

TEST ///
--isMinRankTable--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(isMinRankTable rankMatrix w == true );
assert(isMinRankTable rankMatrix I == true );
assert(isMinRankTable rankMatrix PI == true );
///

TEST ///
--rankTableToASM--
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(rankTableToASM rankMatrix w == matrix{{0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 1}, {0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 0}, {0, 0, 0, 1, 0, 0}});
assert(rankTableToASM rankMatrix I == I);
assert(rankTableToASM rankMatrix PI == PI);
///


--rankTableFromMatrix--
--Examples in other file

--schubIntersect--
--Examples in other file

--schubAdd--
--Examples in other file

TEST ///
--getPermFromASM
w = {2,1,6,3,5,4};
I = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,1},{0,0,0,1,0}};
PI = matrix{{0,0,1,0,0},{0,1,-1,1,0},{1,-1,1,0,0},{0,1,0,-1,0},{0,0,0,1,0}};

assert(getPermFromASM getASM schubDetIdeal w == w );
assert(getPermFromASM getASM schubDetIdeal I == {} );
--PI buggy
--assert(getPermFromASM getASM schubDetIdeal PI == {} );
///


TEST ///
--ASM
--???
///
